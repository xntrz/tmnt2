#include "Keyboard.hpp"

#include "System/PC/PCPhysicalController.hpp"


/*static*/ int32 CKeyboard::GetPort(void)
{
    return CPCPhysicalController::GetPort();
};


/*static*/ void CKeyboard::MapDigital(uint32 uDigital, int32 iDIKey)
{
    CPCPhysicalController::MapDigital(uDigital, iDIKey);
};


/*static*/ void CKeyboard::MapDigitalFixed(uint32 uDigital, int32 iDIKey)
{
    CPCPhysicalController::MapDigitalFixed(uDigital, iDIKey);
};


/*static*/ void CKeyboard::MapAnalog(int32 analog, int32 iDIKeyX, int32 iDIKeyY)
{
    CPCPhysicalController::MapAnalog(analog, iDIKeyX, iDIKeyY);
};


/*static*/ int32 CKeyboard::GetDownKey(void)
{
    return CPCPhysicalController::GetDownKey();
};


/*static*/ bool CKeyboard::IsKeyDown(int32 iDIKey)
{
    return CPCPhysicalController::IsKeyDown(iDIKey);
};


/*static*/ bool CKeyboard::IsKeyValid(int32 iDIKey)
{
    static int8 s_aValidKeyTable [] =
    {
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0,
    };

    return CPCPhysicalController::IsKeyNotFixed(iDIKey) && s_aValidKeyTable[iDIKey];
};


/*static*/ const char* CKeyboard::GetKeyName(int32 iDIKey)
{
    static const char* s_apszKeyNameTable [] =
    {
        "NULL",
        "NULL",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "0",
        "dash",
        "NULL",
        "back",
        "tab",
        "q",
        "w",
        "e",
        "r",
        "t",
        "y",
        "u",
        "i",
        "o",
        "p",
        "lbrace",
        "rbrace",
        "NULL",
        "lctrl",
        "a",
        "s",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "colon",
        "NULL",
        "NULL",
        "lshift",
        "bkslash",
        "z",
        "x",
        "c",
        "v",
        "b",
        "n",
        "m",
        "comma",
        "period",
        "slash",
        "rshift",
        "numpad star",
        "lalt",
        "space",
        "capslock",
        "f1",
        "f2",
        "f3",
        "f4",
        "f5",
        "f6",
        "f7",
        "f8",
        "f9",
        "f10",
        "numlock",
        "scroll",
        "numpad 7",
        "numpad 8",
        "numpad 9",
        "numpad minus",
        "numpad 4",
        "numpad 5",
        "numpad 6",
        "numpad plus",
        "numpad 1",
        "numpad 2",
        "numpad 3",
        "numpad 0",
        "numpad del",
        "NULL",
        "NULL",
        "NULL",
        "f11",
        "f12",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "rctrl",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "numpad slash",
        "NULL",
        "NULL",
        "ralt",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "home",
        "up",
        "pgup",
        "NULL",
        "left",
        "NULL",
        "right",
        "NULL",
        "end",
        "down",
        "pgdown",
        "ins",
        "del",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "lwin",
        "rwin",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
        "NULL",
    };

    if (iDIKey >= 0 && iDIKey < 256)
        return s_apszKeyNameTable[iDIKey];
    else
        return nullptr;
};

